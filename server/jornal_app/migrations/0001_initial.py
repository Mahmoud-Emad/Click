# Generated by Django 3.2.9 on 2021-12-14 10:43

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import server.jornal_app.models.abstracts
import server.jornal_app.models.pages
import server.jornal_app.models.users


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('iframe', models.CharField(blank=True, max_length=500, null=True)),
                ('body', models.TextField(max_length=250)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('is_read', models.BooleanField(default=0)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PageUserPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('user_type', models.CharField(choices=[('ADMIN', 'ADMIN'), ('SUPERVISOR', 'SUPERVISOR'), ('AUTHOR', 'AUTHOR')], max_length=50)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('permission', models.CharField(max_length=50)),
                ('user_type', models.CharField(choices=[('ADMIN', 'ADMIN'), ('SUPERVISOR', 'SUPERVISOR'), ('AUTHOR', 'AUTHOR')], max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=60, unique=True)),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('date_joined', models.DateTimeField(auto_now=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserPageInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('who_control', models.CharField(default='User has not added any information about this field', max_length=500)),
                ('page_history', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='jornal_app.user')),
                ('profile_image', models.ImageField(upload_to=server.jornal_app.models.users.Get_progile_image_file_path)),
                ('profile_cover', models.ImageField(upload_to=server.jornal_app.models.users.Get_progile_cover_file_path)),
                ('phone_nummber', models.CharField(default=None, max_length=15, null=True, unique=True)),
                ('gender', models.CharField(choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE'), ('OTHER', 'OTHER')], max_length=50)),
                ('marital_status', models.CharField(choices=[('SINGLE', 'SINGLE'), ('MARRIED', 'MARRIED'), ('WIDOWED', 'WIDOWED'), ('DIVORCED', 'DIVORCED')], max_length=50)),
                ('Bio', models.TextField(max_length=580)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('city', models.CharField(max_length=50)),
                ('birthday', models.DateField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('jornal_app.user',),
        ),
        migrations.CreateModel(
            name='OtherMessage',
            fields=[
                ('messages_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='jornal_app.messages')),
                ('is_sending', models.BooleanField(default=True)),
            ],
            bases=('jornal_app.messages',),
        ),
        migrations.CreateModel(
            name='UserWorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('company', models.CharField(max_length=50)),
                ('from_date', models.DateField(auto_now=True)),
                ('to_date', models.DateField(auto_now=True)),
                ('i_still_work', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_work', to='jornal_app.user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserUniversity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('university', models.CharField(max_length=50)),
                ('from_date', models.DateField(auto_now=True)),
                ('to_date', models.DateField(auto_now=True)),
                ('i_still_study', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_uni', to='jornal_app.user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('other_messages', models.BooleanField(default=True)),
                ('online_status', models.BooleanField(default=True)),
                ('hide_email', models.BooleanField(default=False)),
                ('hide_friends', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_settings', to='jornal_app.user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserSchool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('school', models.CharField(max_length=50)),
                ('from_date', models.DateField(auto_now=True)),
                ('to_date', models.DateField(auto_now=True)),
                ('i_still_study', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_sch', to='jornal_app.user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('page_name', models.CharField(max_length=100)),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
                ('about', models.TextField(max_length=500)),
                ('profile_image', models.ImageField(upload_to=server.jornal_app.models.pages.Get_progile_image_file_path)),
                ('profile_cover', models.ImageField(upload_to=server.jornal_app.models.pages.Get_progile_cover_file_path)),
                ('is_active', models.BooleanField(default=False)),
                ('category', models.ManyToManyField(related_name='cats', to='jornal_app.Category')),
                ('external_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='jornal_app.userpageinfo')),
                ('followers', models.ManyToManyField(related_name='page_followers', to='jornal_app.User')),
                ('following', models.ManyToManyField(related_name='page_following', to='jornal_app.User')),
                ('users', models.ManyToManyField(related_name='users', to='jornal_app.PageUserPermission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('iframe', models.CharField(blank=True, max_length=500, null=True)),
                ('body', models.TextField(max_length=250)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jornal_app.user')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment', to='jornal_app.comment')),
                ('likes', models.ManyToManyField(related_name='reply_likes', to='jornal_app.User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('iframe', models.CharField(blank=True, max_length=500, null=True)),
                ('body', models.TextField(blank=True, max_length=500, null=True)),
                ('privecy', models.CharField(choices=[('Public', 'Public'), ('Friends', 'Friends'), ('Only me', 'Only me')], default='Public', max_length=50)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to='jornal_app.user')),
                ('likes', models.ManyToManyField(related_name='post_likes', to='jornal_app.User')),
                ('shered_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='jornal_app.post')),
            ],
        ),
        migrations.AddField(
            model_name='pageuserpermission',
            name='pages',
            field=models.ManyToManyField(blank=True, null=True, related_name='user_pages', to='jornal_app.UserPage'),
        ),
        migrations.AddField(
            model_name='pageuserpermission',
            name='permissions',
            field=models.ManyToManyField(related_name='user_page_per', to='jornal_app.Permissions'),
        ),
        migrations.AddField(
            model_name='pageuserpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jornal_app.user'),
        ),
        migrations.AddField(
            model_name='messages',
            name='receiver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='me_receiver', to='jornal_app.user'),
        ),
        migrations.AddField(
            model_name='messages',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='me_sender', to='jornal_app.user'),
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('SENDING', 'SENDING'), ('DECLINING', 'DECLINING'), ('ACCEPRING', 'ACCEPRING'), ('REMOVED', 'REMOVED')], max_length=50)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receiver', to='jornal_app.user')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender', to='jornal_app.user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FriendList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('blooking_users', models.ManyToManyField(blank=True, related_name='black_list', to='jornal_app.User')),
                ('friends', models.ManyToManyField(blank=True, related_name='friends', to='jornal_app.User')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user', to='jornal_app.user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Following',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('followers', models.ManyToManyField(blank=True, related_name='followers', to='jornal_app.User')),
                ('following', models.ManyToManyField(blank=True, related_name='following', to='jornal_app.User')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_follow', to='jornal_app.user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jornal_app.user'),
        ),
        migrations.AddField(
            model_name='comment',
            name='likes',
            field=models.ManyToManyField(related_name='comment_likes', to='jornal_app.User'),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_comments', to='jornal_app.post'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.CheckConstraint(check=models.Q(('privecy__in', ['Public', 'Friends', 'Only me'])), name='jornal_app_post_type_valid'),
        ),
    ]
